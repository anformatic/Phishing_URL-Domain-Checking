import time
import sys, csv, re,random ,string

Request_Domain  = ['www.faceboak.com'] 
TARGET ='www.facebook.com' # the major name of bank
MAX_COST =1000
sim_table1={('1','2'):0.13,('1','4'):0.08,('1','7'):0.2,('1','9'):0.06,('2','3'):0.06,('2','5'):0.13,('2','7'):0.25,
   ('2','9'):0.11,('3','0'):0.03,('3','7'):0.06,('3','8'):0.34,('3','9'):0.18,('4','7'):0.09,('4','9'):0.03,
   ('5','0'):0.06,('5','6'):0.19,('5','7'):0.06,('6','0'):0.23,('6','7'):0.06,('6','8'):0.16,('6','9'):0.43,
   ('7','9'):0.11,('8','0'):0.2,('8','9'):0.13,('9','0'):0.13,('a','0'):0.48,('a','1'):0.06,('a','2'):0.06,
   ('a','4'):0.19,('a','5'):0.11,('a','6'):0.26,('a','8'):0.06,('a','9'):0.29,('a','b'):0.18,('a','c'):0.24,
   ('a','d'):0.4,('a','e'):0.35,('a','g'):0.26,('a','n'):0.14,('a','o'):0.46,('a','p'):0.26,('a','q'):0.41,
   ('a','s'):0.06,('a','u'):0.18,('a','v'):0.06,('a','w'):0.06,('a','x'):0.06,('a','y'):0.06,('a','z'):0.19,
   ('b','0'):0.25,('b','1'):0.19,('b','4'):0.06,('b','5'):0.18,('b','6'):0.41,('b','8'):0.19,('b','9'):0.19,
   ('b','c'):0.24,('b','d'):0.71,('b','e'):0.19,('b','f'):0.13,('b','g'):0.24,('b','h'):0.74,('b','i'):0.13,
   ('b','k'):0.13,('b','l'):0.19,('b','n'):0.06,('b','o'):0.49,('b','p'):0.65,('b','q'):0.53,('b','r'):0.06,
   ('b','u'):0.2,('b','v'):0.13,('c','0'):0.35,('c','2'):0.13,('c','5'):0.24,('c','6'):0.2,('c','9'):0.06,
   ('c','d'):0.19,('c','e'):0.74,('c','g'):0.06,('c','n'):0.13,('c','o'):0.41,('c','p'):0.25,('c','q'):0.31,
   ('c','s'):0.13,('c','u'):0.06,('c','x'):0.06,('c','z'):0.13,('d','0'):0.26,('d','1'):0.06,('d','4'):0.06,
   ('d','5'):0.06,('d','6'):0.26,('d','7'):0.06,('d','8'):0.06,('d','9'):0.3,('d','e'):0.06,('d','f'):0.06,
   ('d','g'):0.38,('d','h'):0.33,('d','i'):0.13,('d','j'):0.06,('d','k'):0.06,('d','l'):0.13,('d','n'):0.06,
   ('d','o'):0.26,('d','p'):0.54,('d','q'):0.53,('d','r'):0.06,('d','u'):0.11,('e','0'):0.25,('e','5'):0.24,
   ('e','6'):0.26,('e','9'):0.19,('e','g'):0.13,('e','i'):0.06,('e','j'):0.06,('e','l'):0.06,('e','n'):0.13,
   ('e','o'):0.24,('e','p'):0.2,('e','q'):0.13,('e','r'):0.05,('e','u'):0.06,('e','z'):0.14,('f','1'):0.24,
   ('f','7'):0.06,('f','8'):0.06,('f','9'):0.06,('f','i'):0.24,('f','j'):0.13,('f','k'):0.06,('f','l'):0.25,
   ('f','p'):0.14,('f','r'):0.31,('f','t'):0.36,('g','0'):0.24,('g','4'):0.18,('g','5'):0.06,('g','6'):0.13,
   ('g','8'):0.43,('g','9'):0.54,('g','h'):0.06,('g','j'):0.19,('g','l'):0.06,('g','o'):0.25,('g','p'):0.45,
   ('g','q'):0.6,('g','s'):0.06,('g','u'):0.03,('g','y'):0.19,('h','0'):0.06,('h','1'):0.13,('h','6'):0.13,
   ('h','8'):0.06,('h','i'):0.06,('h','k'):0.06,('h','l'):0.13,('h','m'):0.25,('h','n'):0.76,('h','o'):0.13,
   ('h','p'):0.19,('h','q'):0.19,('h','r'):0.03,('h','t'):0.13,('h','u'):0.06,('i','1'):0.65,('i','7'):0.06,
   ('i','9'):0.06,('i','j'):0.56,('i','k'):0.29,('i','l'):0.59,('i','m'):0.06,('i','n'):0.13,('i','p'):0.13,
   ('i','q'):0.13,('i','r'):0.29,('i','t'):0.39,('i','y'):0.13,('j','1'):0.31,('j','7'):0.06,('j','9'):0.13,
   ('j','k'):0.13,('j','l'):0.53,('j','p'):0.06,('j','q'):0.13,('j','r'):0.06,('j','t'):0.19,('j','y'):0.19,
   ('k','1'):0.09,('k','6'):0.09,('k','l'):0.19,('k','n'):0.06,('k','r'):0.06,('k','s'):0.15,('k','t'):0.09,
   ('k','x'):0.21,('k','y'):0.1,('l','1'):0.76,('l','6'):0.09,('l','7'):0.15,('l','9'):0.09,('l','n'):0.09,
   ('l','p'):0.09,('l','q'):0.09,('l','r'):0.35,('l','t'):0.46,('l','y'):0.09,('m','0'):0.06,('m','3'):0.06,
   ('m','n'):0.6,('m','o'):0.15,('m','p'):0.06,('m','q'):0.09,('m','r'):0.19,('m','u'):0.09,('m','w'):0.33,
   ('n','0'):0.31,('n','1'):0.06,('n','4'):0.06,('n','9'):0.06,('n','o'):0.53,('n','p'):0.19,('n','q'):0.13,
   ('n','r'):0.3,('n','s'):0.06,('n','t'):0.06,('n','u'):0.35,('n','v'):0.19,('n','w'):0.06,('n','x'):0.13,
   ('o','0'):0.79,('o','5'):0.15,('o','6'):0.2,('o','8'):0.25,('o','9'):0.26,('o','p'):0.43,('o','q'):0.43,
   ('o','s'):0.06,('o','u'):0.38,('o','v'):0.06,('p','0'):0.25,('p','1'):0.06,('p','4'):0.06,('p','6'):0.06,
   ('p','9'):0.34,('p','q'):0.6,('p','r'):0.09,('p','t'):0.06,('p','y'):0.13,('q','0'):0.28,('q','1'):0.06,
   ('q','2'):0.09,('q','4'):0.18,('q','5'):0.06,('q','6'):0.09,('q','8'):0.2,('q','9'):0.55,('q','r'):0.06,
   ('q','t'):0.06,('q','y'):0.21,('r','1'):0.3,('r','6'):0.11,('r','7'):0.11,('r','t'):0.13,('r','u'):0.06,
   ('r','v'):0.13,('r','x'):0.06,('r','y'):0.18,('s','1'):0.06,('s','2'):0.13,('s','5'):0.71,('s','6'):0.21,
   ('s','7'):0.06,('s','t'):0.06,('s','x'):0.06,('s','z'):0.33,('t','1'):0.43,('t','4'):0.06,('t','7'):0.06,
   ('t','u'):0.06,('u','0'):0.18,('u','1'):0.06,('u','5'):0.03,('u','6'):0.03,('u','v'):0.59,('u','w'):0.11,
   ('u','x'):0.06,('u','y'):0.24,('v','1'):0.06,('v','7'):0.06,('v','w'):0.56,('v','x'):0.19,('v','y'):0.65,
   ('v','z'):0.06,('w','7'):0.06,('w','x'):0.19,('w','y'):0.19,('w','z'):0.06,('x','2'):0.06,('x','4'):0.06,
   ('x','7'):0.06,('x','8'):0.08,('x','y'):0.44,('x','z'):0.13,('y','1'):0.13,('y','2'):0.06,('y','7'):0.2,
   ('y','9'):0.05,('y','z'):0.13,('z','1'):0.06,('z','2'):0.55,('z','4'):0.06,('z','5'):0.06,('z','7'):0.41,
            ('0','3'):0.03,('0','5'):0.06,('0','6'):0.23,('0','8'):0.2,('0','9'):0.13,('0','a'):0.48,('0','b'):0.25,
 ('0','c'):0.35,('0','d'):0.26,('0','e'):0.25,('0','g'):0.24,('0','h'):0.06,('0','m'):0.06,('0','n'):0.31,
 ('0','o'):0.79,('0','p'):0.25,('0','q'):0.28,('0','u'):0.18,('1','a'):0.06,('1','b'):0.19,('1','d'):0.06,
 ('1','f'):0.24,('1','h'):0.13,('1','i'):0.65,('1','j'):0.31,('1','k'):0.09,('1','l'):0.76,('1','n'):0.06,
 ('1','p'):0.06,('1','q'):0.06,('1','r'):0.3,('1','s'):0.06,('1','t'):0.43,('1','u'):0.06,('1','v'):0.06,
 ('1','y'):0.13,('1','z'):0.06,('2','1'):0.13,('2','a'):0.06,('2','c'):0.13,('2','q'):0.09,('2','s'):0.13,
 ('2','x'):0.06,('2','y'):0.06,('2','z'):0.55,('3','2'):0.06,('3','m'):0.06,('4','1'):0.08,('4','a'):0.19,
 ('4','b'):0.06,('4','d'):0.06,('4','g'):0.18,('4','n'):0.06,('4','p'):0.06,('4','q'):0.18,('4','t'):0.06,
 ('4','x'):0.06,('4','z'):0.06,('5','2'):0.13,('5','a'):0.11,('5','b'):0.18,('5','c'):0.24,('5','d'):0.06,
 ('5','e'):0.24,('5','g'):0.06,('5','o'):0.15,('5','q'):0.06,('5','s'):0.71,('5','u'):0.03,('5','z'):0.06,
 ('6','5'):0.19,('6','a'):0.26,('6','b'):0.41,('6','c'):0.2,('6','d'):0.26,('6','e'):0.26,('6','g'):0.13,
 ('6','h'):0.13,('6','k'):0.09,('6','l'):0.09,('6','o'):0.2,('6','p'):0.06,('6','q'):0.09,('6','r'):0.11,
 ('6','s'):0.21,('6','u'):0.03,('7','1'):0.2,('7','2'):0.25,('7','3'):0.06,('7','4'):0.09,('7','5'):0.06,
 ('7','6'):0.06,('7','d'):0.06,('7','f'):0.06,('7','i'):0.06,('7','j'):0.06,('7','l'):0.15,('7','r'):0.11,
 ('7','s'):0.06,('7','t'):0.06,('7','v'):0.06,('7','w'):0.06,('7','x'):0.06,('7','y'):0.2,('7','z'):0.41,
 ('8','3'):0.34,('8','6'):0.16,('8','a'):0.06,('8','b'):0.19,('8','d'):0.06,('8','f'):0.06,('8','g'):0.43,
 ('8','h'):0.06,('8','o'):0.25,('8','q'):0.2,('8','x'):0.08,('9','1'):0.06,('9','2'):0.11,('9','3'):0.18,
 ('9','4'):0.03,('9','6'):0.43,('9','7'):0.11,('9','8'):0.13,('9','a'):0.29,('9','b'):0.19,('9','c'):0.06,
 ('9','d'):0.3,('9','e'):0.19,('9','f'):0.06,('9','g'):0.54,('9','i'):0.06,('9','j'):0.13,('9','l'):0.09,
 ('9','n'):0.06,('9','o'):0.26,('9','p'):0.34,('9','q'):0.55,('9','y'):0.05,('b','a'):0.18,('c','a'):0.24,
 ('c','b'):0.24,('d','a'):0.4,('d','b'):0.71,('d','c'):0.19,('e','a'):0.35,('e','b'):0.19,('e','c'):0.74,
 ('e','d'):0.06,('f','b'):0.13,('f','d'):0.06,('g','a'):0.26,('g','b'):0.24,('g','c'):0.06,('g','d'):0.38,
 ('g','e'):0.13,('h','b'):0.74,('h','d'):0.33,('h','g'):0.06,('i','b'):0.13,('i','d'):0.13,('i','e'):0.06,
 ('i','f'):0.24,('i','h'):0.06,('j','d'):0.06,('j','e'):0.06,('j','f'):0.13,('j','g'):0.19,('j','i'):0.56,
 ('k','b'):0.13,('k','d'):0.06,('k','f'):0.06,('k','h'):0.06,('k','i'):0.29,('k','j'):0.13,('l','b'):0.19,
 ('l','d'):0.13,('l','e'):0.06,('l','f'):0.25,('l','g'):0.06,('l','h'):0.13,('l','i'):0.59,('l','j'):0.53,
 ('l','k'):0.19,('m','h'):0.25,('m','i'):0.06,('n','a'):0.14,('n','b'):0.06,('n','c'):0.13,('n','d'):0.06,
 ('n','e'):0.13,('n','h'):0.76,('n','i'):0.13,('n','k'):0.06,('n','l'):0.09,('n','m'):0.6,('o','a'):0.46,
 ('o','b'):0.49,('o','c'):0.41,('o','d'):0.26,('o','e'):0.24,('o','g'):0.25,('o','h'):0.13,('o','m'):0.15,
 ('o','n'):0.53,('p','a'):0.26,('p','b'):0.65,('p','c'):0.25,('p','d'):0.54,('p','e'):0.2,('p','f'):0.14,
 ('p','g'):0.45,('p','h'):0.19,('p','i'):0.13,('p','j'):0.06,('p','l'):0.09,('p','m'):0.06,('p','n'):0.19,
 ('p','o'):0.43,('q','a'):0.41,('q','b'):0.53,('q','c'):0.31,('q','d'):0.53,('q','e'):0.13,('q','g'):0.6,
 ('q','h'):0.19,('q','i'):0.13,('q','j'):0.13,('q','l'):0.09,('q','m'):0.09,('q','n'):0.13,('q','o'):0.43,
 ('q','p'):0.6,('r','b'):0.06,('r','d'):0.06,('r','e'):0.05,('r','f'):0.31,('r','h'):0.03,('r','i'):0.29,
 ('r','j'):0.06,('r','k'):0.06,('r','l'):0.35,('r','m'):0.19,('r','n'):0.3,('r','p'):0.09,('r','q'):0.06,
 ('s','a'):0.06,('s','c'):0.13,('s','g'):0.06,('s','k'):0.15,('s','n'):0.06,('s','o'):0.06,('t','f'):0.36,
 ('t','h'):0.13,('t','i'):0.39,('t','j'):0.19,('t','k'):0.09,('t','l'):0.46,('t','n'):0.06,('t','p'):0.06,
 ('t','q'):0.06,('t','r'):0.13,('t','s'):0.06,('u','a'):0.18,('u','b'):0.2,('u','c'):0.06,('u','d'):0.11,
 ('u','e'):0.06,('u','g'):0.03,('u','h'):0.06,('u','m'):0.09,('u','n'):0.35,('u','o'):0.38,('u','r'):0.06,
 ('u','t'):0.06,('v','a'):0.06,('v','b'):0.13,('v','n'):0.19,('v','o'):0.06,('v','r'):0.13,('v','u'):0.59,
 ('w','a'):0.06,('w','m'):0.33,('w','n'):0.06,('w','u'):0.11,('w','v'):0.56,('x','a'):0.06,('x','c'):0.06,
 ('x','k'):0.21,('x','n'):0.13,('x','r'):0.06,('x','s'):0.06,('x','u'):0.06,('x','v'):0.19,('x','w'):0.19,
 ('y','a'):0.06,('y','g'):0.19,('y','i'):0.13,('y','j'):0.19,('y','k'):0.1,('y','l'):0.09,('y','p'):0.13,
 ('y','q'):0.21,('y','r'):0.18,('y','u'):0.24,('y','v'):0.65,('y','w'):0.19,('y','x'):0.44,('z','a'):0.19,
 ('z','c'):0.13,('z','e'):0.14,('z','s'):0.33,('z','v'):0.06,('z','w'):0.06,('z','x'):0.13,('z','y'):0.13}
       
# Keep some interesting statistics
NodeCount = 0
WordCount = 0
# The Trie data structure keeps a set of words, organized with one node for
# each letter. Each node has a branch for each letter that may follow it in the
# set of words.
class TrieNode:
    def __init__(self):
        self.word = None
        self.children = {}
        global NodeCount
        NodeCount += 1
    def insert( self, word ):
        node = self
        for letter in word:
            if letter not in node.children: 
                node.children[letter] = TrieNode()
            node = node.children[letter]
        node.word = word
# read Request_Domain file into a trie
trie = TrieNode()
for word in Request_Domain:
    WordCount += 1
    trie.insert( word )
print ("Read %d words into %d nodes" % (WordCount, NodeCount))
# The search function returns a list of all words that are less than the given
# maximum distance from the target word
def search( word, maxCost ):
    # build first row
    currentRow = range( len(word) + 1 )
    results = []
    # recursively search each branch of the trie
    for letter in trie.children:
        searchRecursive( trie.children[letter], letter, word, currentRow, 
            results, maxCost )
    return results
# This recursive helper is used by the search function above. It assumes that
# the previousRow has been filled in already.
def searchRecursive( node, letter, word, previousRow, results, maxCost ):
    columns = len( word ) + 1
    currentRow = [ previousRow[0] + 1 ]
    # Build one row for the letter, with a column for each letter in the target
    # word, plus one for the empty string at column 0
    for column in range( 1, columns ):
        insertCost = currentRow[column - 1] + 1
        deleteCost = previousRow[column] + 1
        if (str(word[column - 1])).lower() != str(letter).lower():
            if ((str(word[column - 1])).lower(), (str(letter)).lower()) in sim_table1.keys():
                replaceCost = previousRow[ column - 1 ] + 1 -(sim_table1[((str(word[column - 1])).lower(), (str(letter)).lower())])
            else:
                replaceCost = previousRow[ column - 1 ] + 1
         
            
        else:                
            replaceCost = previousRow[ column - 1 ]
        currentRow.append( min( insertCost, deleteCost, replaceCost ) )

    # if the last entry in the row indicates the optimal cost is less than the
    # maximum cost, and there is a word in this trie node, then add it.
    if currentRow[-1] <= maxCost and node.word != None:
        results.append( (node.word, currentRow[-1] ) )
    

    # if any entries in the row are less than the maximum cost, then 
    # recursively search each branch of the trie
    if min( currentRow ) <= maxCost:
        for letter in node.children:
            searchRecursive( node.children[letter], letter, word, currentRow, results, maxCost )

start = time.time()
results=(str(search( TARGET, MAX_COST )))
print(results)
end = time.time()
print ("Search took %g s" % (end - start))
